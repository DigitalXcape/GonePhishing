@model IEnumerable<DomainScanner.Models.DomainTask>
@{
    var job = ViewData["Job"] as DomainScanner.Models.ScanJob;
    ViewData["Title"] = "Status";
}
<h2>Scan Status - Job @job.Id</h2>
<p>Created: @job.CreatedAt.ToLocalTime()</p>
<p>Seed domains:<pre>@job.SeedDomains</pre></p>

<button id="refresh">Refresh</button>
<table border="1" id="results" cellpadding="4">
    <thead>
        <tr><th>ID</th><th>Domain</th><th>State</th><th>IPs</th><th>HTTP</th><th>Error</th><th>When</th></tr>
    </thead>
    <tbody>
        @foreach (var t in Model)
        {
            <tr>
                <td>@t.Id</td>
                <td>@t.CandidateDomain</td>
                <td>@t.State</td>
                <td>@t.IPAddresses</td>
                <td>@t.HttpStatus @t.HttpReason</td>
                <td>@t.Error</td>
                <td>@(t.ProcessedAt?.ToLocalTime().ToString() ?? "")</td>
            </tr>
        }
    </tbody>
</table>

<script>
    const jobId = @job.Id;
    document.getElementById('refresh').addEventListener('click', ()=> fetchStatus());

    // auto-refresh every 5s
    setInterval(fetchStatus, 5000);

    async function fetchStatus(){
        const r = await fetch('/Scan/StatusJson?id=' + jobId);
        const j = await r.json();
        const tbody = document.querySelector('#results tbody');
        tbody.innerHTML = '';
        for (const t of j.tasks){
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${t.id}</td>
                            <td>${t.candidateDomain}</td>
                            <td>${t.state}</td>
                            <td>${t.ipAddresses ?? ''}</td>
                            <td>${t.httpStatus ?? ''} ${t.httpReason ?? ''}</td>
                            <td>${t.error ?? ''}</td>
                            <td>${t.processedAt ?? ''}</td>`;
            tbody.appendChild(tr);
        }
    }
</script>